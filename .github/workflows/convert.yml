name: Convert TotalSegmentator Models

on:
  workflow_dispatch:
    inputs:
      model:
        description: 'Model to convert (all, body, lung_vessels, etc.)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - body
          - lung_vessels
          - cerebral_bleed
          - hip_implant
          - coronary_arteries
      precision:
        description: 'Model precision'
        required: true
        default: 'fp16'
        type: choice
        options:
          - fp16
          - fp32
      validate:
        description: 'Validate conversion'
        required: true
        default: true
        type: boolean

jobs:
  prepare-models:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies for model preparation
      run: |
        python -m pip install --upgrade pip
        pip install torch==2.1.0 torchvision --index-url https://download.pytorch.org/whl/cpu
        pip install numpy
    
    - name: Create directories
      run: |
        mkdir -p models/pytorch logs
    
    - name: Download or create models
      env:
        TOTALSEGMENTATOR_TOKEN: ${{ secrets.TOTALSEGMENTATOR_TOKEN }}
      run: |
        if [ -n "$TOTALSEGMENTATOR_TOKEN" ]; then
          echo "Downloading real TotalSegmentator models..."
          python scripts/download_models.py --token $TOTALSEGMENTATOR_TOKEN
        else
          echo "Creating dummy models for testing..."
          python scripts/create_dummy_models.py
        fi
        
        # List created models
        echo "Available models:"
        ls -la models/pytorch/
    
    - name: Upload PyTorch models
      uses: actions/upload-artifact@v4
      with:
        name: pytorch-models
        path: models/pytorch/*.pth
        retention-days: 7
    
    - name: Upload source code
      uses: actions/upload-artifact@v4
      with:
        name: source-code
        path: |
          src/
          scripts/
          convert_totalsegmentator.py
          requirements.txt
          setup.py
        retention-days: 7

  convert-to-coreml:
    needs: prepare-models
    runs-on: macos-13  # Use specific macOS version for stability
    
    steps:
    - name: Download source code
      uses: actions/download-artifact@v4
      with:
        name: source-code
    
    - name: Download PyTorch models
      uses: actions/download-artifact@v4
      with:
        name: pytorch-models
        path: models/pytorch
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        
        # Install PyTorch (CPU version for macOS)
        pip install torch==2.1.0 torchvision --index-url https://download.pytorch.org/whl/cpu
        
        # Install coremltools and other dependencies
        pip install coremltools==7.1
        pip install numpy
        pip install tqdm
        pip install colorlog
        
        # Install the package in development mode
        pip install -e .
        
        # Verify installations
        python -c "import torch; print(f'PyTorch version: {torch.__version__}')"
        python -c "import coremltools; print(f'CoreMLTools version: {coremltools.__version__}')"
    
    - name: Create output directories
      run: |
        mkdir -p models/coreml logs validation_reports
    
    - name: Convert models
      run: |
        echo "Starting CoreML conversion..."
        
        if [ "${{ github.event.inputs.model }}" = "all" ]; then
          python convert_totalsegmentator.py --all \
            --precision ${{ github.event.inputs.precision }} \
            ${{ github.event.inputs.validate && '--validate' || '--no-validate' }} \
            --cpu-only \
            --log-level DEBUG
        else
          python convert_totalsegmentator.py \
            --model ${{ github.event.inputs.model }} \
            --precision ${{ github.event.inputs.precision }} \
            ${{ github.event.inputs.validate && '--validate' || '--no-validate' }} \
            --cpu-only \
            --log-level DEBUG
        fi
        
        # List converted models
        echo "Converted models:"
        ls -la models/coreml/ || echo "No models found in models/coreml/"
    
    - name: Upload CoreML models
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coreml-models-${{ github.event.inputs.precision }}
        path: models/coreml/*.mlpackage
        retention-days: 30
        if-no-files-found: warn
    
    - name: Upload conversion logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: conversion-logs
        path: logs/
        retention-days: 7
        if-no-files-found: warn
    
    - name: Upload validation reports
      if: github.event.inputs.validate == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: validation-reports
        path: validation_reports/
        retention-days: 30
        if-no-files-found: warn

  test-ios-integration:
    needs: convert-to-coreml
    runs-on: macos-13
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download CoreML models
      uses: actions/download-artifact@v4
      with:
        name: coreml-models-${{ github.event.inputs.precision }}
        path: models/coreml
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.2'  # Use specific version for stability
    
    - name: Verify iOS demo exists
      run: |
        if [ -d "examples/ios_integration" ]; then
          echo "iOS integration example found"
          ls -la examples/ios_integration/
        else
          echo "iOS integration example not found, skipping iOS tests"
          echo "ios_demo_exists=false" >> $GITHUB_ENV
          exit 0
        fi
        echo "ios_demo_exists=true" >> $GITHUB_ENV
    
    - name: Test iOS integration
      if: env.ios_demo_exists == 'true'
      run: |
        cd examples/ios_integration
        
        # Check if the scheme exists
        xcodebuild -list || echo "No Xcode project found"
        
        # Run tests if project exists
        if [ -f "*.xcodeproj" ] || [ -f "*.xcworkspace" ]; then
          xcodebuild test \
            -scheme TotalSegmentatorDemo \
            -destination 'platform=iOS Simulator,name=iPhone 14' \
            -quiet || echo "iOS tests failed or not configured"
        else
          echo "No Xcode project found, skipping iOS tests"
        fi
    
    - name: Build iOS demo app
      if: env.ios_demo_exists == 'true'
      run: |
        cd examples/ios_integration
        
        if [ -f "*.xcodeproj" ] || [ -f "*.xcworkspace" ]; then
          xcodebuild archive \
            -scheme TotalSegmentatorDemo \
            -archivePath build/TotalSegmentatorDemo.xcarchive \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -quiet || echo "iOS build failed or not configured"
        else
          echo "No Xcode project found, skipping iOS build"
        fi

  summary:
    needs: [convert-to-coreml]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download conversion logs
      uses: actions/download-artifact@v4
      with:
        name: conversion-logs
        path: logs/
      continue-on-error: true
    
    - name: Generate summary
      run: |
        echo "## Conversion Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "logs" ]; then
          echo "### Logs Found:" >> $GITHUB_STEP_SUMMARY
          for log in logs/*.log; do
            if [ -f "$log" ]; then
              echo "- $(basename $log)" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          # Try to extract summary from main log
          if [ -f "logs/conversion.log" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Conversion Results:" >> $GITHUB_STEP_SUMMARY
            grep -E "(SUCCESS|FAILED|ERROR)" logs/conversion.log | tail -20 >> $GITHUB_STEP_SUMMARY || echo "No results found in log" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "No conversion logs found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Model:** ${{ github.event.inputs.model }}" >> $GITHUB_STEP_SUMMARY
        echo "**Precision:** ${{ github.event.inputs.precision }}" >> $GITHUB_STEP_SUMMARY
        echo "**Validation:** ${{ github.event.inputs.validate }}" >> $GITHUB_STEP_SUMMARY